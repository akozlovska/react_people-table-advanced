{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage/HomePage.tsx","components/NotFoundPage/NotFoundPage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","types/QueryParams.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","types/SortTypes.ts","components/PersonLink/PersonLink.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","Navbar","useSearchParams","searchParams","className","role","to","pathname","search","toString","App","HomePage","NotFoundPage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","QueryParams","PeopleFilters","setSearchParams","sex","get","Sex","centuries","getAll","Centuries","getCenturiesForSearch","century","includes","filter","c","type","placeholder","onChange","e","newSearch","setSearchWith","query","target","map","length","Loader","SortTypes","Personlink","person","slug","name","PeopleTable","people","useParams","sort","Sort","order","Order","getSearchWithSort","sortType","getPersonByName","find","useEffect","selectedPerson","document","querySelector","scrollIntoView","block","behavior","window","scrollTo","top","values","slice","toUpperCase","mother","motherName","undefined","father","fatherName","born","died","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isLoadingError","setIsLoadingError","Query","filteredPeople","useMemo","filtered","lowerQuery","toLowerCase","Math","ceil","person1","person2","first","second","Name","localeCompare","Born","Died","getPeople","catch","finally","Root","path","element","index","replace","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.c9ce03bc.chunk.js","sourcesContent":["import { NavLink, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => cn(\n  'navbar-item', { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={getLinkClass} to=\"/\">Home</NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to={{ pathname: 'people', search: searchParams.toString() }}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage: React.FC = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const NotFoundPage: React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nexport const SearchLink: React.FC<Props> = ({\n  children,\n  params,\n  ...props\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum QueryParams {\n  Query = 'query',\n  Sex = 'sex',\n  Centuries = 'centuries',\n  Sort = 'sort',\n  Order = 'order',\n}\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\nimport { QueryParams } from '../types/QueryParams';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get(QueryParams.Sex) || '';\n  const centuries = searchParams.getAll(QueryParams.Centuries) || [];\n\n  const setSearchWith = (params: SearchParams) => {\n    const newSearch = getSearchWith(searchParams, params);\n\n    setSearchParams(newSearch.toString());\n  };\n\n  const getCenturiesForSearch = (century: string) => {\n    return centuries.includes(century)\n      ? centuries.filter(c => c !== century)\n      : [...centuries, century];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={cn({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={cn({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={cn({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={(e) => setSearchWith({ query: e.target.value || null })}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {['16', '17', '18', '19', '20'].map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                params={{ centuries: getCenturiesForSearch(century) }}\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              params={{ centuries: null }}\n              className={cn('button is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{ query: null, sex: null, centuries: null }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum SortTypes {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import cn from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const Personlink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{ pathname: `../${person.slug}`, search: searchParams.toString() }}\n      className={cn({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { useEffect } from 'react';\nimport { useParams, Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { QueryParams } from '../types/QueryParams';\nimport { SortTypes } from '../types/SortTypes';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { Personlink } from './PersonLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get(QueryParams.Sort) || '';\n  const order = searchParams.get(QueryParams.Order) || '';\n\n  function getSearchWithSort(sortType: SortTypes) {\n    if (!sort || sort !== sortType) {\n      return getSearchWith(searchParams, { sort: sortType, order: null });\n    }\n\n    if (!order) {\n      return getSearchWith(searchParams, { sort: sortType, order: 'desc' });\n    }\n\n    return getSearchWith(searchParams, { sort: null, order: null });\n  }\n\n  function getPersonByName(name: string) {\n    return people.find(person => person.name === name);\n  }\n\n  useEffect(() => {\n    const selectedPerson = document.querySelector('.has-background-warning');\n\n    if (selectedPerson) {\n      selectedPerson.scrollIntoView({\n        block: 'center',\n        behavior: 'smooth',\n      });\n    } else {\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  }, [slug]);\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.values(SortTypes).map(sortType => (\n            <th key={sortType}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {sortType.slice(0, 1).toUpperCase() + sortType.slice(1)}\n\n                <Link\n                  to={{ search: getSearchWithSort(sortType) }}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={cn('fas', {\n                        'fa-sort': !sort || sort !== sortType,\n                        'fa-sort-up': sort === sortType && !order,\n                        'fa-sort-down': sort === sortType && order,\n                      })}\n                    />\n                  </span>\n                </Link>\n              </span>\n            </th>\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const mother = person.motherName\n            ? getPersonByName(person.motherName)\n            : undefined;\n          const father = person.fatherName\n            ? getPersonByName(person.fatherName)\n            : undefined;\n\n          return (\n            <tr\n              key={person.slug}\n              data-cy=\"person\"\n              className={cn({\n                'has-background-warning': person.slug === slug,\n              })}\n            >\n              <td>\n                <Personlink person={person} />\n              </td>\n\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td>\n                {person.motherName ? (\n                  <>\n                    {mother ? (\n                      <Personlink\n                        person={mother}\n                      />\n                    ) : (\n                      <>\n                        {person.motherName}\n                      </>\n                    )}\n                  </>\n                ) : (\n                  '-'\n                )}\n              </td>\n              <td>\n                {person.fatherName ? (\n                  <>\n                    {father ? (\n                      <Personlink\n                        person={father}\n                      />\n                    ) : (\n                      <>\n                        {person.fatherName}\n                      </>\n                    )}\n                  </>\n                ) : (\n                  '-'\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from '../PeopleFilters';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { QueryParams } from '../../types/QueryParams';\nimport { SortTypes } from '../../types/SortTypes';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get(QueryParams.Query) || '';\n  const sex = searchParams.get(QueryParams.Sex) || '';\n  const centuries = searchParams.getAll(QueryParams.Centuries) || [];\n  const sort = searchParams.get(QueryParams.Sort) || '';\n  const order = searchParams.get(QueryParams.Order) || '';\n\n  const filteredPeople = useMemo(() => {\n    let filtered = [...people];\n\n    if (query) {\n      const lowerQuery = query.toLowerCase();\n\n      filtered = filtered.filter(\n        person => person.name.toLowerCase().includes(lowerQuery)\n        || person.motherName?.toLowerCase().includes(lowerQuery)\n        || person.fatherName?.toLowerCase().includes(lowerQuery),\n      );\n    }\n\n    if (sex) {\n      filtered = filtered.filter(person => person.sex === sex);\n    }\n\n    if (centuries.length) {\n      filtered = filtered.filter(person => centuries.includes(\n        Math.ceil(person.born / 100).toString(),\n      ));\n    }\n\n    if (sort) {\n      filtered = [...filtered].sort((person1, person2) => {\n        const first = order ? person1 : person2;\n        const second = order ? person2 : person1;\n\n        switch (sort) {\n          case SortTypes.Name:\n            return second.name.localeCompare(first.name);\n\n          case SortTypes.Sex:\n            return second.sex.localeCompare(first.sex);\n\n          case SortTypes.Born:\n            return +second.born - +first.born;\n\n          case SortTypes.Died:\n            return +second.died - +first.died;\n\n          default:\n            return 0;\n        }\n      });\n    }\n\n    return filtered;\n  }, [query, sex, centuries, sort, order]);\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsLoadingError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n\n            <div className=\"column\">\n              <div className=\"box table-container\">\n                {isLoadingError ? (\n                  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                    Something went wrong\n                  </p>\n                ) : (\n                  <>\n                    {people.length ? (\n                      <>\n                        {filteredPeople.length ? (\n                          <PeopleTable people={filteredPeople} />\n                        ) : (\n                          <p>\n                            There are no people matching\n                            the current search criteria\n                          </p>\n                        )}\n                      </>\n                    ) : (\n                      <p data-cy=\"noPeopleMessage\">\n                        There are no people on the server\n                      </p>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import {\n  HashRouter as Router,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"people\">\n          <Route path=\":slug?\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}